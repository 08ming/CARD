 committed stake or voting-power and a signature verifcation key. Each stakeholder additionally has access to his own stake value, the signing key, and the randomness used 
Com,SIG
for the stake commitment. In our protocols the functionality F is used to provide the static stake 
Init 
information. In practice, this information could for instance be stored in the genesis block of a blockchain. 
More generally, the stake distribution is dynamic and can be read from the the blockchain. We discuss the extension to dynamic stake in Section 4.4. 


Common reference string. In our protocols stakeholders use zero-knowledge proofs to show that they won the stake lottery. The functionality FD provides the common reference string required for those 
crs 
zero-knowledge proofs. 

Verifable pseudorandom function. In our protocols, stakeholders use the VRF functionality FCom 
VRF 
to get the randomness in the stake lottery. The functionality allows a stakeholder to generate a key and then evaluate the VRF under that key. The evaluation returns a value and a commitment of that value. The commitment can then used by parties to verify the claimed FCom 
VRF evaluation. The functionality also oers Verify queries, where anyone can check if a given output of the VRF was computed correctly. Note that the Verify queries do not disclose the identity of the party who have generated the output. In other words, Verify checks if a given output is in the combined image of all the registered VRF keys. 
The VRF functionality FCom 
VRF is defned as follows. 

Anonymous Broadcast. Stakeholders cannot publish their messages over a regular network as this would reveal their identity. We therefore assume that stakeholders use an anonymous broadcast channel. The functionality FABC allows a party to send messages anonymously to all parties. The adversary is allowed to send anonymous messages to specifc parties. 


4 Feasibility of Private Proof-of-Stake 
In order to make a proof-of-stake protocol private, a frst solution that comes to mind is to have the parties prove in zero-knowledge that they indeed won the lottery (either for a slot or committee membership). This does hide the identity, but it reveals the stake of the winning account. It might seem like one can hide the stake too by having the parties commit to their stakes and give a zero-knowledge proof of winning on committed stake. While this indeed hides the stake in a single proof, it leaks how often a given account wins. One can infer information about the stake in a given account from the frequency with which an account participates in a committee or wins a slot. Therefore, the actual statement that one needs to prove in a private lottery needs to take the list of all accounts as input. Now, a party proves knowledge of corresponding secret key of some public key in a list, and the stake in that account won the lottery. We employ this idea to give a general framework for constructing a private proof-of-stake protocol. The framework applies to proof-of-stake protocols that work with lottery functions which are locally verifable, that is, a party can locally determine whether it wins or not. The lottery is a function of the party¡¯s stake and may depend on other parameters like slot, role etc that we call entry parameters. The set E of entry parameters for the lottery depends on the type of proof of stake. In a slot-based proof-of-stake, for instance, the lottery elects a leader for a particular slot that allows the leader to publish a block for that slot. Ouroboros Praos [KRDO17] is an example of such a slot-based proof-of-stake. In protocols such as Algorand [GHM+17], where the protocol is committee-based, the lottery is for determining a certain role in a committee, and our framework applies to both type of protocols. 
4.1 Private Lottery Functionality 
The private lottery functionality is an abstraction that we introduce to capture the privacy requirements
LE,E
discussed above. The functionality FLottery is parametrized by the set E of allowed entry parameters, and a predicate function LE. The predicate LE takes as input the relative stake and randomness. It allows stakeholder pid to locally check whether they won the lottery for entry e. If yes, they can publish pairs of the form (e,m) where m is an allowed message as determined and verifed by the proof-of-stake protocol that uses the lottery; for instance, when slot-based, m is a block, when committee-based, m is a committee message. 


4.2 Private Lottery Protocol 
LE,E
The high level idea to implement FLottery is as follows. Parties collect information available on the blockchain about the public keys and the corresponding stake of stakeholders. A list L = {(Cstk1, vk1), ¡¤¡¤¡¤ , (Cstkn , vkn)}is compiled with tuples of the form (Cstk, vk) where vk is a verifcation key for a signature scheme (KeyGen, Sign, Ver), and Cstk is a commitment to the stake. 
The lottery is defned relative to a lottery predicate LE. A stakeholder pid wins the lottery for entry e, if LE(stk,r(e, pid)) = 1, where r is randomness that depends on the entry e and stakeholder identity, ensuring that the lottery for dierent stakeholders is independent. The randomness for the lottery is generated by the VRF functionality FCom 
VRF . Winning the lottery for e allows a stakeholder to publish messages for e. 
To ensure privacy, the stakeholder proves in zero-knowledge that he indeed won the lottery, and as part of this proof it is necessary to prove ownership of his stake. We can do this by proving that the tuple containing the same committed stake and a signing key is in the public list L (without revealing which one it is), and ownership of the key by proving knowledge of the corresponding secret key. The statement to prove is of the form ¡°I know sk, vk, stk such that (vk, sk) is a valid signature key pair, (Cstk, vk) 2L, and I won the lottery with stake stk for entry e¡±. In addition, there needs to be a signature ¨B on (e,m) to ensure that no other message can be published with this proof, and this signature is also verifed inside the zero-knowledge proof with respect to the verifcation key in the same tuple. Note that since the proof is used to verify the correctness of the signature, the proof itself (and public values for the statement) are not included in the information that is signed. More formally, the proof is of the following form. 
PK{(Cstk, stk, ¨B,vk, sk,r): LE(stk; r)=1 ^ Cstk = Com(stk) ^ Vervk((e,m),¨B)=1 ^ vk = KeyGen(sk) ^ (Cstk, vk) 2 L} 
The published information now consists of entry e, the message m, zero-knowledge proof for the above statement, and certain public values that form the statement. We assume that the zero-knowledge proof requires a CRS which is given by the functionality FD 
crs. The actual publication of the message is done via anonymous broadcast FABC to protect the identity of the stakeholder. The detailed construction of the private lottery Lottery ProtocolE,LE is given below. The protocol 
Com,SIG 
crs, FComLottery ProtocolE,LE is run by parties interacting with ideal functionalities FABC, F , FD VRF and
Init 
among themselves. Let the algorithms (Setup, Prove, Verify) be a non-interactive zero-knowledge argu-ment system. Lottery ProtocolE,LE proceeds as follows. 


LE,E Com,SIG
Theorem 1. The protocol Lottery ProtocolE,LE realizes the FLottery functionality in the (FABC, F ,
Init FD VRF )-hybrid world in t