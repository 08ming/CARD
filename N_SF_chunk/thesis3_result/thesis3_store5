ess: There exists a polynomial time algorithm called the extractor which when given s 


0 00
and two transcripts (a, r, e) and (a,r ,e0) that are accepting for s, with r =6 r , outputs w such that 
(x, w0) 2 R. 
4. Special honest verifer zero knowledge: There exists a polynomial time simulator which on input s and a random r outputs a transcript (a, r, e) with the same probability distribution as that generated by an honest interaction between P and V on (common) input s. 
Sigma protocols and NIZK. The Fiat-Shamir transform [FS87] may be used to compile a  protocol into a non-interactive zero-knowledge proof of knowledge in the random oracle model. In this paper, we will be concerned with transformations in the CRS model [Dam00, Lin15]. The transformation of [Dam00] gives a 3-round concurrent zero-knowledge protocol, while [Lin15] is non-interactive. 
OR composition of -protocols. In [CDS94], the authors devise a composition technique for using sigma protocols to prove compound OR statements. Essentially, a prover can e.ciently show ((x0 2L) _ (x1 2L)) without revealing which xi is in the language. More generally, the OR transform can handle two dierent relations R0 and R1. If 0 is a -protocol for R0 and 1 a -protocol for R1, then there is a -protocol OR for the relation ROR given by {((x0,x1),w) : ((x0,w) 2 R0) _ ((x1,w) 2 R1)}. 
Pedersen Commitment. Throughout the paper, we use an algebraic commitment scheme that allows proving polynomial relationships among committed values. The Pedersen commitment scheme [Ped92] is one such example that provides computational binding and unconditional hiding properties based on the discrete logarithm problem. It works in a group of prime order q. Given two random generators g 
and h such that log h is unknown, a value x 2 Zq is committed to by choosing r randomly from Zq,
g 
and computing Cx = gxhr. We write Comq(x) to denote a Pedersen commitment to x in a group of order q. There are Sigma protocols in literature to prove knowledge of a committed value, equality of two committed values, and so on, and these protocols can be combined in natural ways. In particular, Pedersen commitments allow proving polynomial relationships among committed values: Given Com(x) and Com(y), prove that y = ax + b for some public values a and b. In our constructions, we make use of existing sigma protocols for proving statements about discrete logarithms, and polynomial relationships among committed values [Sch91, FO97, CS97, CM99]. Throughout, we use the following notation: 
PK{(x, y, . . .): statements about x, y, . . .} 
In the above, x, y, . . . are secrets (discrete logarithms), the prover claims knowledge of x, y, . . . such that they satisfy statements. The other values in the protocol are public. 

2.4 Merkle Tree 
A Merkle tree is a hash based data structure that is used both to generically extend the domain of a hash function and as a succinct commitment to a large string. To construct a Merkle tree from a string m 2{0, 1}n, we split the string into blocks bi 2{0, 1}k. Each block is then a leaf of the tree, and we use a hash function H to compress two leaves into an internal node. Again, at the next level, each pair of siblings is compressed into a node using the hash function, and this is continued until a single node is obtained which is the root of the Merkle tree. In order to verify the membership of a block in a string represented by a Merkle tree root, it is su.cient to provide a path from the leaf node corresponding to the claimed block all the way up to the public root node. This is easily verifed given the hash values along the path together with the hash values of sibling nodes. 

2.5 Decisional Di.e-Hellman Assumption 
Let G be the description of cyclic group of prime order q for q = (2) output by a PPT group generator algorithm G on input 1. Let g be a generator of G. The decisional Di.e¨CHellman (DDH) problem for G is the following: given group elements ( ,, ), distinguish whether they are independent and uniformly 
a ab
random in G or whether = g and = gb are independent and uniformly random and = g . 
The DDH assumption is said to hold in G if there exists a function negl such that no PPT algorithm A can win in the above distinguishing game with probability more that 1/2+ negl(). 



3 Model 
In this section, we defne certain functionalities that are used in our later protocols. 
Stake Distribution. We assume that parties have access to a list of (static) stakeholder accounts. Each such account consists of the committed stake or voting-pow