verifypk0 (x, y, ’)=1 for (y, ’)= VRFprovek(pk0 ,x), pk0 Update(pk) 
每 Anonymity. For any PPT algorithm A, the following probability is 1/2+ negl(k). 
0
1
(pk0, k0) Gen(1k); (pk1, k1) Gen(1k); xA(pk0, pk1); pk0 0 Update(pk0);
BB@ CCA
Pr 
b = b0 
(y0,’0)= VRFprovek0(pk0 0,x); pk0 Update(pk1);
1 
(y1,’1)= VRFprovek1(pk0 1,x); b 
. 
{0, 1}; b0 
A(pk0 b,yb,’b) 
Intuitively, the above defnition says that no adversary can tell which key an output came from, given two public keys. 
Anonymous VRF construction. We show how to instantiate the AVRF primitive. Our starting point is a PRF adapted from the 2-hash VRF construction used in Ouroboros Praos. To use this primitive in making Ouroboros Praos private, the additional property required is that it is secure against malicious key generation. The work of [KKKZ18] shows that this PRF indeed satisfes unpredictability under malicious key generation. Let AVRF be the tuple of algorithms (Gen, VRFprove, VRFverify) which are defned as follows. Let G be a group of prime order q such that q = (2k). 
每 Gen(1k): Choose a generator g of a group G, and sample a random k 2 Zq and output (pk, k), where pk =(g, gk). 
0 r 0 r 0
每 
Update(pk): Let pk be (g, v). Choose a random r 2 Zq, let g = g ,v = v , set pk0 =(g ,v0), output pk0 . 

每 
VRFprovek(pk0 ,x): Let pk0 be (g, v). Compute u = H(x),y = uk, and ’0 : PK{(k):log (y)=log (v)}.


ug 
Set ’ =(u, ’0). Output (pk0, y, ’) 
每 VRFverifypk0 (x, y, ’): Output 1 if u = H(x) and ’ verifes, and 0 otherwise. 
It is clear that the above construction satisfes the above properties of a AVRF. For anonymity, we reduce to DDH; we show that any adversary who breaks anonymity can be used to break DDH. 
4 Note that this is a weakening of the uniqueness property required from VRF in literature, where, unique-
ness says there does not exist values (pk, x, y1,y2,’1,’2) such that y1 =6 y2 and VRFverifypk(x, y1,’1)= 
VRFverifypk(x, y2,’2)= 1. 
Lemma 1. Assuming that DDH is hard in group G, the AVRF (Gen, VRFprove, VRFverify) satisfes anonymity as defned in Defnition 2. 
Proof. Let A be the adversary who wins the anonymity game in Defnition 2. We now show how to use A to break DDH. Let B be an adversary who receives a challenge (g, A = ga,B = gb,C = gc) and has to determine whether it is a DDH tuple or not. B works as follows: it chooses random r 2 Zq, chooses 2{0, 1} at random, and sets the public keys pk =(gr,Ar) and samples pk1. honestly by invoking the Gen algorithm. B returns pk0, pk1 to A. On receiving a x, B sets pk0 =(h, v)=(Br,Cr), programs 
tt
the RO on input x to be g for random t 2 Zq, that is u = g . It now sets y = At and ’ to be the simulated proof PK{a : log (y) = logh(v)}. B returns (pk0, y, u, ’) to A. Let be the output of A. If
u 
=, B returns ※DDH tuple§, otherwise B returns ※not a DDH tuple§. Assuming A wins the anonymity game we have that the probability that b = b0 in the anonymity 
2 + AdvA
game is  1 . We have the advantage in the DDH game, 
2 
AdvB = Pr[B outputs 1|DDH] . Pr[B outputs 1| non-DDH] 
If the adversary B receives a DDH tuple, then the view of adversary A in the reduction is identical to 
br abr)
the view in the real execution of the AVRF anonymity game. Consider the updated key pk0 =(g ,g 
br
which we can write as pk0 =(g, (gbr)a) Therefore, pk0 is a correctly updated key of pk . Adversary B outputs 1 with the same probability as the probability of A winning the AVRF anonymity game. Thus we have: 
Pr[B outputs 1|DDH] = Pr[A outputs b0 = b in the real anonymity game ] 
Now, if the adversary B receives a non-DDH tuple, then the view of the adversary is independent 
br
of in an information theoretic sense since pk0 =(g ,gcr) is independent of both pk0, pk1. Thus, the adversary cannot guess with probability more than 1/2, and we have, Pr[B outputs 1| non-DDH]= 
1/2 . We therefore have,  
AdvB   1 AdvA 1 .2 + 2 2  AdvA 2  
ut  

Note that while AVRF gives the anonymous verifability property, it does not guarantee that the key used to evaluate comes from one of the two keys that the adversary sees at the onset of the game. In applications, it is desirable to satisfy this ※key membership§ property. Indeed, the FCom functionality 
VRF 
that was defned in Section 3 has the property that verifcation does not leak a public key and also guarantees that it is one of the registered keys. The FCom 
VRF functionality also allows verifability of y while keeping y secret. We use other techniques on top of the AVRF primitive to realize the FCom 
VRF functionality; in general, proving membership of the corresponding AVRF secret key in a list of committed secret keys will su.ce for membership and we preserve privacy by committing to the output and proving correct evaluation in zero-knowledge. We elaborate on this in the next section. 
※Approval Voting§ via AVRF. To demonstrate the usefulness of AVRF outside of the context of PPoS, here is a simple example application, namely approval voting. In approval voting, a group of users can vote (e.g., approve) any number of candidates, and the winner of the election is the candidate who is approved by the highest number of voters. To implement such voting with cryptographic techniques, one needs to ensure anonymity of the voters and, at the same time, that each voter can approve each candidate at most once. This can be easily done using our AVRF abstraction: Each user registers an AVRF public key pk1,..., pk . To vote on option x, user i publishes pk0 = Update(pki) and gives a
n 
ZK-proof that 9i :(pk0 , pki) 2 L (in our AVRF the language L is simply the language of DDH tuple). Then the user computes and publishes (y, ’)= VRFprovek(pk0 ,x). If the proof ’ does not verify or if the value y has already appeared in this poll, then the other users discard this vote. Otherwise, they register a new vote for option x. Now, due to the anonymity and indistinguishability properties of the VRF, it is unfeasible to link any two casted votes, except if the same user tries to approve the same candidate more than once, since the value y is only a function of k and x. 

5.3 Private Ouroboros Praos 
Recall that our private lottery protocol now needs to prove that LE(stk; y) = 1 in zero-knowledge. For this, we need to prove y<T in zero knowledge, that is, without revealing y or T 5. Note that, in addition, we need to prove the correct computation of T which involves evaluating ∼ on a secret 
involving foating-point arithmetic. Using generic zero-knowledge proofs for a statement like above would be expensive. We show how to avoid this and exploit the specifc properties of the statement. In particular, we take advantage of the ※independent aggregation§ property that is satisfed by the above function ∼ to construct a zero-knowledge proof for leader election i.e., that the function ∼ satisfes the following property: 
!
XY 
1 . ∼ i = (1 . ∼( i)) ii 
The above implies that if a party were to split its stake among virtual parties, the probability that the party is elected for a particular slot is identical to the probability that one of the virtual parties is elected for that slot. 
Remark 1. Due to rounding performed when evaluating the predicate LE, the probability of winning is not identical under redistribution of stakes. However, by setting the precision ` appropriately we can always ensure that the dierence between the winning probabilities above is at most negligible. 
Proof of correct evaluation of LE predicate ’LE. The idea behind our proof is to split the stake among virtual parties and prove that one of the virtual parties wins without revealing which one of them won. We also use the hash-based AVRF instantiation in the LE since we want to achieve verifability of correct evaluation without disclosing a public key. More precisely, each stakeholder has a key pair (vk, sk) of a signature scheme (KeyGen, Sign, Ver), and a key pair (pk, k) for an AVRF family F. To realize the key membership property for the AVRF, we now include the public key for the AVRF in a stakeholder＊s tuple. Thus, the list L now consists of tuples (Cstk, vk, pk). 
Let pid be a stakeholder with (absolute) stake stk, and wants to prove that it won the election, that is