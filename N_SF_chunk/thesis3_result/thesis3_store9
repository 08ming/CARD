k, pk). 
Let pid be a stakeholder with (absolute) stake stk, and wants to prove that it won the election, that is LE(stk; Fk(sl)) = 1, where F is the AVRF function. Let bi, 8i 2 [0,s . 1] be the bits of the stake of stakeholder pid, where stk = Ps.1 and the maximum stake in the system is represented in s-bits.
i=0 2ibi Now, the stake is split among s virtual parties ¡°in the head¡± where the stake of the ith virtual party is 2ibi. We now have by the aggregation property, that the probability of winning with stake stk is equal to the probability of winning with one of the above s stakes. Let the probability of winning with stake 2ibi be pi, let (yi,¡¦i)= VRFprovek(pki,i||sl), for pki Update(pk). Let Ti be the threshold corresponding to the ith divided stake, Ti =2` pi. We use the AVRF key of the stakeholder to evaluate yi corresponding to the ith stake by including the index i along with the slot number in the evaluation, and prove that yi <Ti for at least one i. Note that now, the thresholds Ti in the statement are public values, in contrast to private threshold prior to the the stake being split among virtual parties. In addition, the statement only uses the function ¡ã in a blackbox way and is independent of the di.culty parameter f. The zero-knowledge proofs, therefore do not have to change with tuning of the di.culty parameter of the leader election function. The proof is for the statement that there exists at least one bit such that the bit is one, the corresponding virtual party won the lottery, bits combine to yield the committed stake and correct evaluation of the AVRF. The following is a proof that LE was evaluated correctly on stk. 
PK{(y1, ¡¤¡¤¡¤ ys,b1, ¡¤¡¤¡¤ ,bs,i , k, stk): 
! 
s
^X 
(bi 2{0, 1}) ^ (bi =1 ^ yi <Ti ^ yi = Fk(i||sl)) ^ stk =2j bj}
i=1 
Proof ¡¦LE is about the correct evaluation of the predicate LE on private stake and randomness, and correct evaluation of the yi¡¯s. The above proof convinces that a committed stake wins the lottery. It is 
5 Since T is a direct function of stk, it should be clear why T should stay private. At the same time, revealing the value y and the fact that LE output 1 allows to rule out that stk = s for any value s such that LE(s; y) = 0. 
still necessary to prove ownership of this stake. We can do this by proving that the tuple containing the same committed stake, signature verifcation key, and an APRF key is in the list L, and ownership of the signature key by proving knowledge of the corresponding signing key. 
Proof of ownership ¡¦own. We represent the list L as a Merkle tree, where the leaf are the tuples (Cstkpid , vkpid, pkpid)pid 2L. We can now prove membership by proving a valid path to the public root given a commitment to a leaf. Let L(root) denote the Merkle tree representation of the list L. Given the root of a Merkle tree, an AVRF public key, and commitments to the signature verifcation key, and stake, we want a party proposing a new block to prove that the stake used in the proof of winning lottery corresponds to the signature key and AVRF key it ¡°owns¡±. That is, prove knowledge of (vk, stk, pk) such that Cstk||vk||pk is a leaf of the Merkle tree with root root. To prove membership, one can reveal the path along with the values of the sibling nodes up to the root. We want to prove membership without disclosing the leaf node and therefore use a zero knowledge proof ¡¦path to prove a valid path from a committed leaf to a public root. Let li be Cstk||vk||pk, H be the hash function function used to construct the Merkle tree, and let sib1,..., sibt be the sibling nodes of the nodes on the path from li to the root of a tree with depth t. ¡¦path proves li 2L(root). 
PK{(li, sib1,..., sibt): H(¡¤¡¤¡¤ H(H(li||sib1)||sib2) ¡¤¡¤¡¤ )= root} 
Using the above proof ¡¦path, we can prove ownership. Given root, we denote by ¡¦own the following proof. 
PK{(vk, stk, k, pk,Cstk):(Cstk||vk||pk) 2L(root) ^ pk = g k} 
Proof of signature on a block under the winning key ¡¦sig. ¡¦zk also consists of a proof that a block signature verifes under the winning key. ¡¦sig denotes the following proof, where M is the public block information that is signed. 
PK{(vk, sk,¨B): vk = KeyGen(sk) ^ Vervk(¨B, M)=1} 
Overall proof. The detailed construction of proof ¡¦zk is given below. If the commitment to stake Cstk is an extended Pedersen commitment (e.g., hr ¡¤ is =1(gi)bi ) where the stakes are already committed bit by bit, the proof ¡¦LE is a standard sigma protocol. If instead, it is a Pedersen commitment to the entire stake, one can publish fresh commitments to bits and prove correct recombination. The range proofs that are used in ¡¦LE allow one to prove that x 2 [0,R] for a public R and committed x. Range proofs may be instantiated using several known techniques [CCs08, Bou00]. More recently, the technique of bulletproof [BBB+18] results in very e.cient range proofs when the interval is [0, 2n . 1] for some n. Since we use SNARKs for other statements, we also implement the range check inside a SNARK resulting in short proofs. The proof ¡¦LE also relies on the OR composition of sigma protocols. ¡¦own may be realized e.ciently using SNARKs when the Merkle tree hash function H is non-algebraic. While it might seems like such a statement would result in ine.cient proofs, this can in fact be done e.ciently in practice, and is implemented by ZCash¡¯s private-pool transactions [BCG+14]. The predicate Eq that tests if two public keys comes from the same key is the following predicate for the concrete AVRF: it outputs 1 if pk and pk0 form a DDH tuple. For a public pk0 and private pk as in our case, this can be implemented using double discrete logarithm sigma protocol proofs [CS97, MGGR1